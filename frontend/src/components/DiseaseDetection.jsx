import { useState, useRef, useEffect, useCallback } from 'react';
import './DiseaseDetection.css';

const DiseaseDetection = ({ onBackToHome }) => {
  const [selectedImage, setSelectedImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [analyzing, setAnalyzing] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const [selectedLanguage, setSelectedLanguage] = useState('english');
  const fileInputRef = useRef(null);

  // Indian languages list with English and Hindi at the top
  const indianLanguages = [
    { code: 'english', name: 'English', nativeName: 'English' },
    { code: 'hindi', name: 'Hindi', nativeName: 'рд╣рд┐рдВрджреА' },
    { code: 'bengali', name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛' },
    { code: 'telugu', name: 'Telugu', nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б' },
    { code: 'marathi', name: 'Marathi', nativeName: 'рдорд░рд╛рдареА' },
    { code: 'tamil', name: 'Tamil', nativeName: 'родрооро┐ро┤рпН' },
    { code: 'gujarati', name: 'Gujarati', nativeName: 'ркЧрлБркЬрк░рк╛ркдрлА' },
    { code: 'urdu', name: 'Urdu', nativeName: '╪з╪▒╪п┘И' },
    { code: 'kannada', name: 'Kannada', nativeName: 'р▓Хр▓ир│Нр▓ир▓б' },
    { code: 'odia', name: 'Odia', nativeName: 'рмУрмбрм╝рм┐рмЖ' },
    { code: 'punjabi', name: 'Punjabi', nativeName: 'рикрй░риЬри╛римрйА' },
    { code: 'malayalam', name: 'Malayalam', nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В' },
    { code: 'assamese', name: 'Assamese', nativeName: 'ржЕрж╕ржорзАржпрж╝рж╛' },
    { code: 'sanskrit', name: 'Sanskrit', nativeName: 'рд╕рдВрд╕реНрдХреГрдд' },
    { code: 'nepali', name: 'Nepali', nativeName: 'рдиреЗрдкрд╛рд▓реА' },
    { code: 'sindhi', name: 'Sindhi', nativeName: '╪│┘Ж┌М█М' },
    { code: 'konkani', name: 'Konkani', nativeName: 'рдХреЛрдВрдХрдгреА' },
    { code: 'manipuri', name: 'Manipuri', nativeName: 'ржорзИрждрзИрж▓рзЛржирзН' },
    { code: 'bodo', name: 'Bodo', nativeName: 'рдмрд░\'' },
    { code: 'dogri', name: 'Dogri', nativeName: 'рдбреЛрдЧрд░реА' },
    { code: 'kashmiri', name: 'Kashmiri', nativeName: '┌й┘▓╪┤┘П╪▒' },
    { code: 'santali', name: 'Santali', nativeName: 'с▒ес▒Яс▒▒с▒Ыс▒Яс▒Юс▒д' },
    { code: 'maithili', name: 'Maithili', nativeName: 'рдореИрдерд┐рд▓реА' }
  ];

  // Function to get language instruction for Gemini API
  const getLanguageInstruction = (languageCode) => {
    const languageMap = {
      'english': 'English',
      'hindi': 'Hindi (рд╣рд┐рдВрджреА)',
      'bengali': 'Bengali (ржмрж╛ржВрж▓рж╛)',
      'telugu': 'Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)',
      'marathi': 'Marathi (рдорд░рд╛рдареА)',
      'tamil': 'Tamil (родроорж┐ро┤рпН)',
      'gujarati': 'Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)',
      'urdu': 'Urdu (╪з╪▒╪п┘И)',
      'kannada': 'Kannada (р▓Хр▓ир│Нр▓ир▓б)',
      'odia': 'Odia (рмУрмбрм╝рм┐рмЖ)',
      'punjabi': 'Punjabi (рикрй░риЬри╛римрйА)',
      'malayalam': 'Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)',
      'assamese': 'Assamese (ржЕрж╕ржорзАржпрж╝рж╛)',
      'sanskrit': 'Sanskrit (рд╕рдВрд╕реНрдХреГрдд)',
      'nepali': 'Nepali (рдиреЗрдкрд╛рд▓реА)',
      'sindhi': 'Sindhi (╪│┘Ж┌М█М)',
      'konkani': 'Konkani (рдХреЛрдВрдХрдгреА)',
      'manipuri': 'Manipuri (ржорзИрждрзИрж▓рзЛржирзН)',
      'bodo': 'Bodo (рдмрд░\')',
      'dogri': 'Dogri (рдбреЛрдЧрд░реА)',
      'kashmiri': 'Kashmiri (┌й┘▓╪┤┘П╪▒)',
      'santali': 'Santali (с▒ес▒Яс▒▒с▒Ыс▒Яс▒Юс▒д)',
      'maithili': 'Maithili (рдореИрдерд┐рд▓реА)'
    };

    return languageMap[languageCode] || 'English';
  };

  // Function to get localized headings
  const getLocalizedHeadings = (languageCode) => {
  const headings = {
    'english': {
      title: 'ЁЯМ▒ Plant Disease Detection',
      subtitle: 'Upload a clear photo of your plant to detect diseases and get expert treatment recommendations',
      analysisResults: 'ЁЯФН Analysis Results',
      diseaseIdentification: 'ЁЯжа Disease Identification',
      symptomsObserved: 'ЁЯФН Symptoms Observed',
      treatmentRecommendations: 'ЁЯТК Treatment Recommendations',
      preventionTips: 'ЁЯЫбя╕П Prevention Tips',
      additionalInformation: 'тД╣я╕П Additional Information',
      confidenceLevel: 'Confidence Level:',
      connectWithExpert: 'ЁЯОЩя╕П Connect with Expert',
      analyzeAnotherPlant: 'ЁЯУ╕ Analyze Another Plant'
    },
    'hindi': {
      title: 'ЁЯМ▒ рдкреМрдзреЛрдВ рдХреА рдмреАрдорд╛рд░реА рдХреА рдкрд╣рдЪрд╛рди',
      subtitle: 'рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдХреА рдкрд╣рдЪрд╛рди рдФрд░ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдЙрдкрдЪрд╛рд░ рд╕реБрдЭрд╛рд╡реЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдкреМрдзреЗ рдХреА рд╕реНрдкрд╖реНрдЯ рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
      analysisResults: 'ЁЯФН рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо',
      diseaseIdentification: 'ЁЯжа рд░реЛрдЧ рдХреА рдкрд╣рдЪрд╛рди',
      symptomsObserved: 'ЁЯФН рджреЗрдЦреЗ рдЧрдП рд▓рдХреНрд╖рдг',
      treatmentRecommendations: 'ЁЯТК рдЙрдкрдЪрд╛рд░ рд╕реБрдЭрд╛рд╡',
      preventionTips: 'ЁЯЫбя╕П рдмрдЪрд╛рд╡ рдХреЗ рддрд░реАрдХреЗ',
      additionalInformation: 'тД╣я╕П рдЕрддрд┐рд░рд┐рдХреНрдд рдЬрд╛рдирдХрд╛рд░реА',
      confidenceLevel: 'рд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрддрд░:',
      connectWithExpert: 'ЁЯОЩя╕П рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдЬреБрдбрд╝реЗрдВ',
      analyzeAnotherPlant: 'ЁЯУ╕ рджреВрд╕рд░реЗ рдкреМрдзреЗ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ'
    },
    'bengali': {
      title: 'ЁЯМ▒ ржЙржжрзНржнрж┐ржж рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝',
      subtitle: 'рж░рзЛржЧ рж╢ржирж╛ржХрзНрждржХрж░ржг ржПржмржВ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржЧрж╛ржЫрзЗрж░ ржПржХржЯрж┐ рж╕рзНржкрж╖рзНржЯ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи',
      analysisResults: 'ЁЯФН ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржлрж▓рж╛ржлрж▓',
      diseaseIdentification: 'ЁЯжа рж░рзЛржЧ рж╢ржирж╛ржХрзНрждржХрж░ржг',
      symptomsObserved: 'ЁЯФН ржкрж░рзНржпржмрзЗржХрзНрж╖рж┐ржд рж▓ржХрзНрж╖ржг',
      treatmentRecommendations: 'ЁЯТК ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ рж╕рзБржкрж╛рж░рж┐рж╢',
      preventionTips: 'ЁЯЫбя╕П ржкрзНрж░рждрж┐рж░рзЛржзрзЗрж░ ржЙржкрж╛ржпрж╝',
      additionalInformation: 'тД╣я╕П ржЕрждрж┐рж░рж┐ржХрзНржд рждржерзНржп',
      confidenceLevel: 'ржЖрж╕рзНржерж╛рж░ ржорж╛рждрзНрж░рж╛:',
      connectWithExpert: 'ЁЯОЩя╕П ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ',
      analyzeAnotherPlant: 'ЁЯУ╕ ржЕржирзНржп ржЧрж╛ржЫ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи'
    },
    'telugu': {
      title: 'ЁЯМ▒ р░ор▒Кр░Хр▒Нр░Хр░▓ р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б',
      subtitle: 'р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ор░░р░┐р░пр▒Б р░ир░┐р░кр▒Бр░гр▒Бр░▓ р░Ър░┐р░Хр░┐р░др▒Нр░╕р░╛ р░╕р░▓р░╣р░╛р░▓р░ир▒Б р░кр▒Кр░Вр░жр░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░ор▒Кр░Хр▒Нр░Х р░пр▒Кр░Хр▒Нр░Х р░╕р▒Нр░кр░╖р▒Нр░Яр░ор▒Ир░и р░лр▒Лр░Яр▒Лр░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      analysisResults: 'ЁЯФН р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░лр░▓р░┐р░др░╛р░▓р▒Б',
      diseaseIdentification: 'ЁЯжа р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б',
      symptomsObserved: 'ЁЯФН р░Чр░ор░ир░┐р░Вр░Ър░┐р░и р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б',
      treatmentRecommendations: 'ЁЯТК р░Ър░┐р░Хр░┐р░др▒Нр░╕р░╛ р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б',
      preventionTips: 'ЁЯЫбя╕П р░ир░┐р░╡р░╛р░░р░г р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б',
      additionalInformation: 'тД╣я╕П р░Ер░жр░ир░кр▒Б р░╕р░ор░╛р░Ър░╛р░░р░В',
      confidenceLevel: 'р░╡р░┐р░╢р▒Нр░╡р░╛р░╕ р░╕р▒Нр░ер░╛р░пр░┐:',
      connectWithExpert: 'ЁЯОЩя╕П р░ир░┐р░кр▒Бр░гр▒Бр░бр░┐р░др▒Л р░Хр░ир▒Жр░Хр▒Нр░Яр▒Н р░Ер░╡р▒Нр░╡р░Вр░бр░┐',
      analyzeAnotherPlant: 'ЁЯУ╕ р░ор░░р▒Л р░ор▒Кр░Хр▒Нр░Хр░ир▒Б р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐'
    },
    'marathi': {
      title: 'ЁЯМ▒ рд╡рдирд╕реНрдкрддреА рд░реЛрдЧ рдУрд│рдЦ',
      subtitle: 'рд░реЛрдЧрд╛рдВрдЪреА рдУрд│рдЦ рдЖрдгрд┐ рддрдЬреНрдЮ рдЙрдкрдЪрд╛рд░ рд╢рд┐рдлрд╛рд░рд╕реАрдВрд╕рд╛рдареА рдЖрдкрд▓реНрдпрд╛ рд╡рдирд╕реНрдкрддреАрдЪрд╛ рд╕реНрдкрд╖реНрдЯ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛',
      analysisResults: 'ЁЯФН рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо',
      diseaseIdentification: 'ЁЯжа рд░реЛрдЧ рдУрд│рдЦ',
      symptomsObserved: 'ЁЯФН рдкрд╛рд╣рд┐рд▓реЗрд▓реА рд▓рдХреНрд╖рдгреЗ',
      treatmentRecommendations: 'ЁЯТК рдЙрдкрдЪрд╛рд░ рд╢рд┐рдлрд╛рд░рд╕реА',
      preventionTips: 'ЁЯЫбя╕П рдмрдЪрд╛рд╡рд╛рдЪреЗ рдЙрдкрд╛рдп',
      additionalInformation: 'тД╣я╕П рдЕрддрд┐рд░рд┐рдХреНрдд рдорд╛рд╣рд┐рддреА',
      confidenceLevel: 'рд╡рд┐рд╢реНрд╡рд╛рд╕ рдкрд╛рддрд│реА:',
      connectWithExpert: 'ЁЯОЩя╕П рддрдЬреНрдЮрд╛рд╢реА рд╕рдВрдкрд░реНрдХ рд╕рд╛рдзрд╛',
      analyzeAnotherPlant: 'ЁЯУ╕ рджреБрд╕рд░реНтАНрдпрд╛ рд╡рдирд╕реНрдкрддреАрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рд╛'
    },
    'tamil': {
      title: 'ЁЯМ▒ родро╛ро╡ро░ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН',
      subtitle: 'роирпЛропрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роирпНродрпБ роиро┐рокрпБрогро░рпН роЪро┐роХро┐роЪрпНроЪрпИ рокро░ро┐роирпНродрпБро░рпИроХро│рпИрокрпН рокрпЖро▒ роЙроЩрпНроХро│рпН родро╛ро╡ро░родрпНродро┐ройрпН родрпЖро│ро┐ро╡ро╛рой рокрпБроХрпИрокрпНрокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН',
      analysisResults: 'ЁЯФН рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роорпБроЯро┐ро╡рпБроХро│рпН',
      diseaseIdentification: 'ЁЯжа роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН',
      symptomsObserved: 'ЁЯФН роХро╛рогрокрпНрокроЯрпНроЯ роЕро▒ро┐роХрпБро▒ро┐роХро│рпН',
      treatmentRecommendations: 'ЁЯТК роЪро┐роХро┐роЪрпНроЪрпИ рокро░ро┐роирпНродрпБро░рпИроХро│рпН',
      preventionTips: 'ЁЯЫбя╕П родроЯрпБрокрпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН',
      additionalInformation: 'тД╣я╕П роХрпВроЯрпБродро▓рпН родроХро╡ро▓рпН',
      confidenceLevel: 'роироорпНрокро┐роХрпНроХрпИ роиро┐ро▓рпИ:',
      connectWithExpert: 'ЁЯОЩя╕П роиро┐рокрпБрогро░рпБроЯройрпН роЗрогрпИроХ',
      analyzeAnotherPlant: 'ЁЯУ╕ рооро▒рпНро▒рпКро░рпБ родро╛ро╡ро░родрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХ'
    },
    'gujarati': {
      title: 'ЁЯМ▒ ркЫрлЛркбркирк╛ рк░рлЛркЧркирлА ркУрк│ркЦ',
      subtitle: 'рк░рлЛркЧрлЛркирлА ркУрк│ркЦ ркЕркирлЗ ркирк┐рк╖рлНркгрк╛ркд рк╕рк╛рк░рк╡рк╛рк░ркирлА ркнрк▓рк╛ркоркгрлЛ ркорк╛ркЯрлЗ ркдркорк╛рк░рк╛ ркЫрлЛркбркирлЛ рк╕рлНрккрк╖рлНркЯ рклрлЛркЯрлЛ ркЕрккрк▓рлЛркб ркХрк░рлЛ',
      analysisResults: 'ЁЯФН рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг рккрк░рк┐ркгрк╛ркорлЛ',
      diseaseIdentification: 'ЁЯжа рк░рлЛркЧркирлА ркУрк│ркЦ',
      symptomsObserved: 'ЁЯФН ркЬрлЛрк╡рк╛ ркорк│рлЗрк▓рк╛ рк▓ркХрлНрк╖ркгрлЛ',
      treatmentRecommendations: 'ЁЯТК рк╕рк╛рк░рк╡рк╛рк░ркирлА ркнрк▓рк╛ркоркгрлЛ',
      preventionTips: 'ЁЯЫбя╕П ркмркЪрк╛рк╡ркирк╛ ркЙрккрк╛ркпрлЛ',
      additionalInformation: 'тД╣я╕П рк╡ркзрк╛рк░рк╛ркирлА ркорк╛рк╣рк┐ркдрлА',
      confidenceLevel: 'рк╡рк┐рк╢рлНрк╡рк╛рк╕ рк╕рлНркдрк░:',
      connectWithExpert: 'ЁЯОЩя╕П ркирк┐рк╖рлНркгрк╛ркд рк╕рк╛ркерлЗ ркЬрлЛркбрк╛ркУ',
      analyzeAnotherPlant: 'ЁЯУ╕ ркмрлАркЬрк╛ ркЫрлЛркбркирлБркВ рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлЛ'
    },
    'urdu': {
      title: 'ЁЯМ▒ ┘╛┘И╪п┘И┌║ ┌й█М ╪и█М┘Е╪з╪▒█М ┌й█М ╪к╪┤╪о█М╪╡',
      subtitle: '╪и█М┘Е╪з╪▒█М┘И┌║ ┌й█М ╪к╪┤╪о█М╪╡ ╪з┘И╪▒ ┘Е╪з█Б╪▒ ╪╣┘Д╪з╪м ┌й█М ╪к╪м╪з┘И█М╪▓ ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж█Т ┘╛┘И╪п█Т ┌й█М ┘И╪з╪╢╪н ╪к╪╡┘И█М╪▒ ╪з┘╛ ┘Д┘И┌И ┌й╪▒█М┌║',
      analysisResults: 'ЁЯФН ╪к╪м╪▓█М█Б ┌й█Т ┘Ж╪к╪з╪ж╪м',
      diseaseIdentification: 'ЁЯжа ╪и█М┘Е╪з╪▒█М ┌й█М ╪┤┘Ж╪з╪о╪к',
      symptomsObserved: 'ЁЯФН ╪п█М┌й┌╛█Т ┌п╪ж█Т ╪╣┘Д╪з┘Е╪з╪к',
      treatmentRecommendations: 'ЁЯТК ╪╣┘Д╪з╪м ┌й█М ╪к╪м╪з┘И█М╪▓',
      preventionTips: 'ЁЯЫбя╕П ╪и┌Ж╪з╪д ┌й█Т ╪╖╪▒█М┘В█Т',
      additionalInformation: 'тД╣я╕П ╪з╪╢╪з┘Б█М ┘Е╪╣┘Д┘И┘Е╪з╪к',
      confidenceLevel: '╪з╪╣╪к┘Е╪з╪п ┌й█М ╪│╪╖╪н:',
      connectWithExpert: 'ЁЯОЩя╕П ┘Е╪з█Б╪▒ ╪│█Т ╪▒╪з╪и╪╖█Б ┌й╪▒█М┌║',
      analyzeAnotherPlant: 'ЁЯУ╕ ╪п┘И╪│╪▒█Т ┘╛┘И╪п█Т ┌й╪з ╪к╪м╪▓█М█Б ┌й╪▒█М┌║'
    },
    'kannada': {
      title: 'ЁЯМ▒ р▓╕р▓╕р│Нр▓п р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж',
      subtitle: 'р▓░р│Лр▓Чр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓др│Нр▓др│Жр▓╣р▓Ър│Нр▓Ър▓▓р│Б р▓ор▓др│Нр▓др│Б р▓др▓Ьр│Нр▓Юр▓░ р▓Ър▓┐р▓Хр▓┐р▓др│Нр▓╕р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓▓р│Б р▓ир▓┐р▓ор│Нр▓о р▓╕р▓╕р│Нр▓пр▓ж р▓╕р│Нр▓кр▓╖р│Нр▓Я р▓лр│Лр▓Яр│Лр▓╡р▓ир│Нр▓ир│Б р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐',
      analysisResults: 'ЁЯФН р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж р▓лр▓▓р▓┐р▓др▓╛р▓Вр▓╢р▓Чр▓│р│Б',
      diseaseIdentification: 'ЁЯжа р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж',
      symptomsObserved: 'ЁЯФН р▓Чр▓ор▓ир▓┐р▓╕р▓┐р▓ж р▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│р│Б',
      treatmentRecommendations: 'ЁЯТК р▓Ър▓┐р▓Хр▓┐р▓др│Нр▓╕р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б',
      preventionTips: 'ЁЯЫбя╕П р▓др▓бр│Жр▓Чр▓Яр│Нр▓Яр│Бр▓╡ р▓ор▓╛р▓░р│Нр▓Чр▓Чр▓│р│Б',
      additionalInformation: 'тД╣я╕П р▓╣р│Жр▓Ър│Нр▓Ър│Бр▓╡р▓░р▓┐ р▓ор▓╛р▓╣р▓┐р▓др▓┐',
      confidenceLevel: 'р▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕ р▓ор▓Яр│Нр▓Я:',
      connectWithExpert: 'ЁЯОЩя╕П р▓др▓Ьр│Нр▓Юр▓░р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓┐р▓╕р▓┐',
      analyzeAnotherPlant: 'ЁЯУ╕ р▓ор▓др│Нр▓др│Кр▓Вр▓жр│Б р▓╕р▓╕р│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓┐р▓╕р▓┐'
    },
    'odia': {
      title: 'ЁЯМ▒ рмЙрмжрнНрмнрм┐рмж рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ',
      subtitle: 'рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ рмПрммрмВ рммрм┐рм╢рнЗрм╖рмЬрнНрмЮ рмЪрм┐рмХрм┐рмдрнНрм╕рм╛ рмкрм░рм╛рморм░рнНрм╢ рмкрм╛рмЗрмБ рмЖрмкрмгрмЩрнНрмХ рмЙрмжрнНрмнрм┐рмжрм░ рмПрмХ рм╕рнНрмкрм╖рнНрмЯ рмлрмЯрнЛ рмЕрмкрм▓рнЛрмбрнН рмХрм░рмирнНрмдрнБ',
      analysisResults: 'ЁЯФН рммрм┐рм╢рнНрм│рнЗрм╖рмг рмлрм│рм╛рмлрм│',
      diseaseIdentification: 'ЁЯжа рм░рнЛрмЧ рмЪрм┐рм╣рнНрмирмЯ',
      symptomsObserved: 'ЁЯФН рмжрнЗрмЦрм╛рмпрм╛рмЗрмерм┐рммрм╛ рм▓рмХрнНрм╖рмг',
      treatmentRecommendations: 'ЁЯТК рмЪрм┐рмХрм┐рмдрнНрм╕рм╛ рмкрм░рм╛рморм░рнНрм╢',
      preventionTips: 'ЁЯЫбя╕П рмкрнНрм░рмдрм┐рм░рнЛрмз рмЙрмкрм╛рнЯ',
      additionalInformation: 'тД╣я╕П рмЕрмдрм┐рм░рм┐рмХрнНрмд рм╕рнВрмЪрмирм╛',
      confidenceLevel: 'рммрм┐рм╢рнНрн▒рм╛рм╕ рм╕рнНрмдрм░:',
      connectWithExpert: 'ЁЯОЩя╕П рммрм┐рм╢рнЗрм╖рмЬрнНрмЮрмЩрнНрмХ рм╕рм╣ рмпрнЛрмЧрм╛рмпрнЛрмЧ рмХрм░рмирнНрмдрнБ',
      analyzeAnotherPlant: 'ЁЯУ╕ рмЕрмирнНрнЯ рмЙрмжрнНрмнрм┐рмж рммрм┐рм╢рнНрм│рнЗрм╖рмг рмХрм░рмирнНрмдрнБ'
    },
    'punjabi': {
      title: 'ЁЯМ▒ рикрйМризри┐риЖриВ рижрйА римри┐риори╛ри░рйА рижрйА рикриЫри╛риг',
      subtitle: 'римри┐риори╛ри░рйАриЖриВ рижрйА рикриЫри╛риг риЕридрйЗ риори╛ри╣ри┐ри░ риЗри▓ри╛риЬ рижрйАриЖриВ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ ри▓риИ риЖрикригрйЗ рикрйМризрйЗ рижрйА ри╕рикри╕ри╝риЯ рилрйЛриЯрйЛ риЕрикри▓рйЛриб риХри░рйЛ',
      analysisResults: 'ЁЯФН ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг рииридрйАриЬрйЗ',
      diseaseIdentification: 'ЁЯжа римри┐риори╛ри░рйА рижрйА рикриЫри╛риг',
      symptomsObserved: 'ЁЯФН рижрйЗриЦрйЗ риЧриП ри▓рй▒риЫриг',
      treatmentRecommendations: 'ЁЯТК риЗри▓ри╛риЬ рижрйАриЖриВ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ',
      preventionTips: 'ЁЯЫбя╕П римриЪри╛риЕ рижрйЗ ридри░рйАриХрйЗ',
      additionalInformation: 'тД╣я╕П ри╡ри╛ризрйВ риЬри╛ригриХри╛ри░рйА',
      confidenceLevel: 'ринри░рйЛри╕рйЗ рижри╛ рикрй▒ризри░:',
      connectWithExpert: 'ЁЯОЩя╕П риори╛ри╣ри┐ри░ риири╛ри▓ риЬрйБрйЬрйЛ',
      analyzeAnotherPlant: 'ЁЯУ╕ риХри┐ри╕рйЗ ри╣рйЛри░ рикрйМризрйЗ рижри╛ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХри░рйЛ'
    },
    'malayalam': {
      title: 'ЁЯМ▒ р┤╕р┤╕р╡Нр┤п р┤░р╡Лр┤Ч р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡╜',
      subtitle: 'р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р┤ир╡Бр┤В р┤╡р┤┐р┤жр┤Чр╡Нр┤з р┤Ър┤┐р┤Хр┤┐р┤др╡Нр┤╕р┤╛ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛ р┤▓р┤нр┤┐р┤Хр╡Нр┤Хр┤╛р┤ир╡Бр┤В р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ър╡Жр┤Яр┤┐р┤пр╡Бр┤Яр╡Ж р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤ор┤╛р┤п р┤лр╡Лр┤Яр╡Нр┤Яр╡Л р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х',
      analysisResults: 'ЁЯФН р┤╡р┤┐р┤╢р┤Хр┤▓р┤и р┤лр┤▓р┤Щр╡Нр┤Щр╡╛',
      diseaseIdentification: 'ЁЯжа р┤░р╡Лр┤Ч р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡╜',
      symptomsObserved: 'ЁЯФН р┤ир┤┐р┤░р╡Ар┤Хр╡Нр┤╖р┤┐р┤Ър╡Нр┤Ъ р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр╡╛',
      treatmentRecommendations: 'ЁЯТК р┤Ър┤┐р┤Хр┤┐р┤др╡Нр┤╕р┤╛ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛',
      preventionTips: 'ЁЯЫбя╕П р┤кр╡Нр┤░р┤др┤┐р┤░р╡Лр┤з р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛',
      additionalInformation: 'тД╣я╕П р┤Ер┤зр┤┐р┤Х р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛',
      confidenceLevel: 'р┤╡р┤┐р┤╢р╡Нр┤╡р┤╛р┤╕ р┤ир┤┐р┤▓:',
      connectWithExpert: 'ЁЯОЩя╕П р┤╡р┤┐р┤жр┤Чр╡Нр┤зр┤ир╡Бр┤ор┤╛р┤пр┤┐ р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤Х',
      analyzeAnotherPlant: 'ЁЯУ╕ р┤ор┤▒р╡Нр┤▒р╡Кр┤░р╡Б р┤Ър╡Жр┤Яр┤┐ р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х'
    },
    'assamese': {
      title: 'ЁЯМ▒ ржЙржжрзНржнрж┐ржжрз░ рз░рзЛржЧ ржЪрж┐ржирж╛ржХрзНрждржХрз░ржг',
      subtitle: 'рз░рзЛржЧ ржЪрж┐ржирж╛ржХрзНрждржХрз░ржг ржЖрз░рзБ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржЪрж┐ржХрж┐рзОрж╕рж╛рз░ ржкрз░рж╛ржорз░рзНрж╢рз░ ржмрж╛ржмрзЗ ржЖржкрзЛржирж╛рз░ ржЙржжрзНржнрж┐ржжрз░ ржПржЦржи рж╕рзНржкрж╖рзНржЯ ржлржЯрзЛ ржЖржкрж▓ржб ржХрз░ржХ',
      analysisResults: 'ЁЯФН ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрз░ ржлрж▓рж╛ржлрж▓',
      diseaseIdentification: 'ЁЯжа рз░рзЛржЧ ржЪрж┐ржирж╛ржХрзНрждржХрз░ржг',
      symptomsObserved: 'ЁЯФН ржкрз░рзНржпржмрзЗржХрзНрж╖рж┐ржд рж▓ржХрзНрж╖ржг',
      treatmentRecommendations: 'ЁЯТК ржЪрж┐ржХрж┐рзОрж╕рж╛рз░ ржкрз░рж╛ржорз░рзНрж╢',
      preventionTips: 'ЁЯЫбя╕П ржкрзНрз░рждрж┐рз░рзЛржзрз░ ржЙржкрж╛ржпрж╝',
      additionalInformation: 'тД╣я╕П ржЕрждрж┐рз░рж┐ржХрзНржд рждржерзНржп',
      confidenceLevel: 'ржмрж┐рж╢рзНржмрж╛рж╕рз░ рж╕рзНрждрз░:',
      connectWithExpert: 'ЁЯОЩя╕П ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрз░ рж╕рзИрждрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрз░ржХ',
      analyzeAnotherPlant: 'ЁЯУ╕ ржЖржи ржЙржжрзНржнрж┐ржж ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрз░ржХ'
    },
    'sanskrit': {
      title: 'ЁЯМ▒ рд╡рдирд╕реНрдкрддрд┐ рд░реЛрдЧ рдирд┐рджрд╛рди',
      subtitle: 'рд░реЛрдЧ рдирд┐рджрд╛рди рдПрд╡рдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕реБрдЭрд╛рд╡рд╛рд░реНрдердВ рд╕реНрд╡рд╕реНрдп рд╡рдирд╕реНрдкрддреЗрдГ рд╕реНрдкрд╖реНрдЯ рдЪрд┐рддреНрд░рдВ рдЕрдкрд▓реЛрдб рдХрд░реЛрддреБ',
      analysisResults: 'ЁЯФН рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдлрд▓рд╛рдирд┐',
      diseaseIdentification: 'ЁЯжа рд░реЛрдЧ рдирд┐рджрд╛рди',
      symptomsObserved: 'ЁЯФН рджреГрд╖реНрдЯ рд▓рдХреНрд╖рдгрд╛рдирд┐',
      treatmentRecommendations: 'ЁЯТК рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕реБрдЭрд╛рд╡рдГ',
      preventionTips: 'ЁЯЫбя╕П рдирд┐рд╡рд╛рд░рдг рдЙрдкрд╛рдпрд╛рдГ',
      additionalInformation: 'тД╣я╕П рдЕрддрд┐рд░рд┐рдХреНрдд рд╕реВрдЪрдирд╛',
      confidenceLevel: 'рд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрддрд░рдГ:',
      connectWithExpert: 'ЁЯОЩя╕П рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЗрди рд╕рд╣ рд╕рдВрдкрд░реНрдХрдВ рдХрд░реЛрддреБ',
      analyzeAnotherPlant: 'ЁЯУ╕ рдЕрдиреНрдп рд╡рдирд╕реНрдкрддрд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдгрдВ рдХрд░реЛрддреБ'
    },
    'nepali': {
      title: 'ЁЯМ▒ рдмрд┐рд░реБрд╡рд╛рдХреЛ рд░реЛрдЧ рдкрд╣рд┐рдЪрд╛рди',
      subtitle: 'рд░реЛрдЧрд╣рд░реВрдХреЛ рдкрд╣рд┐рдЪрд╛рди рд░ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдЙрдкрдЪрд╛рд░ рд╕реБрдЭрд╛рд╡рд╣рд░реВрдХрд╛ рд▓рд╛рдЧрд┐ рдЖрдлреНрдиреЛ рдмрд┐рд░реБрд╡рд╛рдХреЛ рд╕реНрдкрд╖реНрдЯ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН',
      analysisResults: 'ЁЯФН рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдорд╣рд░реВ',
      diseaseIdentification: 'ЁЯжа рд░реЛрдЧ рдкрд╣рд┐рдЪрд╛рди',
      symptomsObserved: 'ЁЯФН рджреЗрдЦрд┐рдПрдХрд╛ рд▓рдХреНрд╖рдгрд╣рд░реВ',
      treatmentRecommendations: 'ЁЯТК рдЙрдкрдЪрд╛рд░ рд╕реБрдЭрд╛рд╡рд╣рд░реВ',
      preventionTips: 'ЁЯЫбя╕П рд░реЛрдХрдерд╛рдо рдЙрдкрд╛рдпрд╣рд░реВ',
      additionalInformation: 'тД╣я╕П рдердк рдЬрд╛рдирдХрд╛рд░реА',
      confidenceLevel: 'рд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрддрд░:',
      connectWithExpert: 'ЁЯОЩя╕П рд╡рд┐рд╢реЗрд╖рдЬреНрдЮрд╕рдБрдЧ рдЬрдбрд╛рди рдЧрд░реНрдиреБрд╣реЛрд╕реН',
      analyzeAnotherPlant: 'ЁЯУ╕ рдЕрд░реНрдХреЛ рдмрд┐рд░реБрд╡рд╛рдХреЛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЧрд░реНрдиреБрд╣реЛрд╕реН'
    },
    'sindhi': {
      title: 'ЁЯМ▒ ┘╗┘И┘╜┘Ж ╪м┘К ╪и┘К┘Е╪з╪▒┘К ╪м┘К ╪│┌Г╪з┌╗┘╛',
      subtitle: '╪и┘К┘Е╪з╪▒┘К┘Ж ╪м┘К ╪│┌Г╪з┌╗┘╛ █╜ ┘Е╪з┘З╪▒ ╪╣┘Д╪з╪м ╪м┘К ╪к╪м┘И┘К╪▓┘Ж ┘Д╪з╪б┘Р ┘╛┘Ж┘З┘Ж╪м┘К ┘╗┘И┘╜┘К ╪м┘К ╪╡╪з┘Б ╪к╪╡┘И┘К╪▒ ╪з┘╛ ┘Д┘И┌К ┌к╪▒┘К┘И',
      analysisResults: 'ЁЯФН ╪к╪м╪▓┘К┘К ╪м╪з ┘Ж╪к┘К╪м╪з',
      diseaseIdentification: 'ЁЯжа ╪и┘К┘Е╪з╪▒┘К ╪м┘К ╪│┌Г╪з┌╗┘╛',
      symptomsObserved: 'ЁЯФН ┌П┘║┘Д ╪╣┘Д╪з┘Е╪к┘И┘Ж',
      treatmentRecommendations: 'ЁЯТК ╪╣┘Д╪з╪м ╪м┘И┘Ж ╪к╪м┘И┘К╪▓┘И┘Ж',
      preventionTips: 'ЁЯЫбя╕П ╪и┌Ж╪з╪б┘П ╪м╪з ╪╖╪▒┘К┘В╪з',
      additionalInformation: 'тД╣я╕П ╪з╪╢╪з┘Б┘К ┘Е╪╣┘Д┘И┘Е╪з╪к',
      confidenceLevel: '╪з╪╣╪к┘Е╪з╪п ╪м┘К ╪│╪╖╪н:',
      connectWithExpert: 'ЁЯОЩя╕П ┘Е╪з┘З╪▒ ╪│╪з┘Ж ╪▒╪з╪и╪╖┘И ┌к╪▒┘К┘И',
      analyzeAnotherPlant: 'ЁЯУ╕ ┘╗╪ж┘К ┘╗┘И┘╜┘К ╪м┘И ╪к╪м╪▓┘К┘И ┌к╪▒┘К┘И'
    },
    'konkani': {
      title: 'ЁЯМ▒ рд░реБрдЦрд╛рдЪреЛ рд░реЛрдЧ рд╡рд│рдЦ',
      subtitle: 'рд░реЛрдЧрд╛рдВрдЪреА рд╡рд│рдЦ рдЖрдиреА рддрдЬреНрдЮ рдЙрдкрдЪрд╛рд░ рд╢рд┐рдлрд╛рд░рд╢реАрдВрдЦрд╛рддреАрд░ рдЖрдкрд▓реНрдпрд╛ рд░реБрдЦрд╛рдЪреЛ рд╕реНрдкрд╖реНрдЯ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░рд╛рдд',
      analysisResults: 'ЁЯФН рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо',
      diseaseIdentification: 'ЁЯжа рд░реЛрдЧ рд╡рд│рдЦ',
      symptomsObserved: 'ЁЯФН рджрд┐рд╕рд▓реНрдпрд╛рдВ рд▓рдХреНрд╖рдгрд╛рдВ',
      treatmentRecommendations: 'ЁЯТК рдЙрдкрдЪрд╛рд░ рд╢рд┐рдлрд╛рд░рд╢реА',
      preventionTips: 'ЁЯЫбя╕П рдмрдЪрд╛рд╡рд╛рдЪреЗ рдЙрдкрд╛рдп',
      additionalInformation: 'тД╣я╕П рдЕрддрд┐рд░рд┐рдХреНрдд рдорд╛рд╣рд┐рддреА',
      confidenceLevel: 'рд╡рд┐рд╢реНрд╡рд╛рд╕ рдкрд╛рддрд│реА:',
      connectWithExpert: 'ЁЯОЩя╕П рддрдЬреНрдЮрд╛рд╢реАрдВ рдЬреБрдбрд╛рдд',
      analyzeAnotherPlant: 'ЁЯУ╕ рджреБрд╕рд▒реНрдпрд╛ рд░реБрдЦрд╛рдЪреЗрдВ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рд╛рдд'
    },
    'manipuri': {
      title: 'ЁЯМ▒ рж▓рж╛ржЗрж░рж┐ржХ ржЕржирж╛ржмржжрж╛ ржЦржВржжрзЛржХржкрж╛',
      subtitle: 'ржЕржирж╛ржмрж╕рж┐ржВ ржЦржВржжрзЛржХржкрж╛ ржЕржорж╕рзБржВ ржПржХрзНрж╕ржкрж╛рж░рзНржд рж╣рж╛ржпрж╝ржжрзЛржХ-рж╣рж╛ржпрж╝рж░ржмрж╛ ржлрзЛржВржжрзЛржХржкржЧрж┐ржжржоржХ ржирж╣рж╛ржХрзНржХрж┐ рж▓рж╛ржЗрж░рж┐ржХрзНржХрж┐ ржЪрж╛ржВржжржоржмрж╛ ржлрзЛрждрзЛ ржЕржкрзНрж▓рзЛржб рждрзМрж░рзЛ',
      analysisResults: 'ЁЯФН рж╢рж░рзБржХ ржпрж╝рж╛ржпрж╝ржмрж╛ ржоржкрзБржВ ржлрж╛ржмрж╕рж┐ржВ',
      diseaseIdentification: 'ЁЯжа ржЕржирж╛ржмрж╛ ржЦржВржжрзЛржХржкрж╛',
      symptomsObserved: 'ЁЯФН ржЙржмрж╛ ржлржВржмрж╛ ржЦрзБржжрзЛрж▓рж╕рж┐ржВ',
      treatmentRecommendations: 'ЁЯТК ржирзБржВрж╢рж┐ржЬрж░ржмрж╛ ржлрзЛржВржжрзЛржХржкрж╕рж┐ржВ',
      preventionTips: 'ЁЯЫбя╕П ржЕрж░рж╛ржиржмрж╛ рж▓ржорзНржмрж┐рж╕рж┐ржВ',
      additionalInformation: 'тД╣я╕П ржЕрждрзЛржкрзНржкрж╛ ржЗржиржлрж░ржорзЗрж╢ржи',
      confidenceLevel: 'ржерж╛ржЬржмрж╛ рж▓рзЗржнрзЗрж▓:',
      connectWithExpert: 'ЁЯОЩя╕П ржПржХрзНрж╕ржкрж╛рж░рзНрждржЧрж╛ ржорж░рж┐ рж╢ржорзНржирж░рзЛ',
      analyzeAnotherPlant: 'ЁЯУ╕ ржЕрждрзЛржкрзНржкрж╛ рж▓рж╛ржЗрж░рж┐ржХ рж╢рж░рзБржХ ржпрж╝рж╛ржмрж╛'
    },
    'bodo': {
      title: 'ЁЯМ▒ рджрд╛рд╡рджрд╛рд╡ рдЧреЛрд╕реЛ рдореЛрдирдЦ',
      subtitle: 'рдЧреЛрд╕реЛрдпрд╛рд╡ рдореЛрдирдЦ рдЖрд░реЛ рдорд╛рд╡рджрд╛рд╡ рд╣рд╛рдпрджрд╛рд╡рдпрд╛рд╡ рд╕рд▓рд╛рд╡рдЖрд╡ рдирд╛рд╡рдЧреЛрди рджрд╛рд╡рджрд╛рд╡рдирд┐ рд╕рд╛рдл рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдЦрд╛рд▓рд╛рдо',
      analysisResults: 'ЁЯФН рдмрд┐рд╕рд▓реЗрдлреНрд░рд╛рдЗрдирд╛рд╡ рдлрд┐рд╕рд╛рдм',
      diseaseIdentification: 'ЁЯжа рдЧреЛрд╕реЛ рдореЛрдирдЦ',
      symptomsObserved: 'ЁЯФН рдирд╛рдпрдиреЛ рдлрд┐рд╕рд╛рд╡',
      treatmentRecommendations: 'ЁЯТК рд╣рд╛рдпрджрд╛рд╡рдпрд╛рд╡ рд╕рд▓рд╛рд╡рдЖрд╡',
      preventionTips: 'ЁЯЫбя╕П рдмреЗрдпрд╛рд╡рдирд╛рд╡ рд▓рд╛рдордЖрд╡',
      additionalInformation: 'тД╣я╕П рдЧреБрд╡рд╛рди рд╕рд╛рдирд╕реЛ',
      confidenceLevel: 'рдмрд┐рд╕реЛрд░рдирд╛рд╡ рд▓реЗрд╡реЗрд▓:',
      connectWithExpert: 'ЁЯОЩя╕П рдорд╛рд╡рджрд╛рд╡рдЧрд╛ рдорд┐рд▓рд╛рд╡ рдЦрд╛рд▓рд╛рдо',
      analyzeAnotherPlant: 'ЁЯУ╕ рдЧреБрд╡рд╛рд░рд┐ рджрд╛рд╡рджрд╛рд╡рдирд┐ рдмрд┐рд╕рд▓реЗрдлреНрд░рд╛рдЗрдирд╛рд╡'
    },
    'dogri': {
      title: 'ЁЯМ▒ рдмреВрдЯрдпрд╛рдВ рджрд╛ рд░реЛрдЧ рдкрд┐рдЫрд╛рдг',
      subtitle: 'рд░реЛрдЧрд╛рдВ рджреА рдкрд┐рдЫрд╛рдг рддреЗ рдорд╛рд╣рд┐рд░ рдЗрд▓рд╛рдЬрд╛ рджрд┐рдпрд╛рдВ рд╕рд┐рдлрд╛рд░рд┐рд╢рд╛рдВ рд▓реЗрдИ рдЕрдкреНрдкрдгреЗ рдмреВрдЯреЗ рджреА рд╕рд╛рдл рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░реЛ',
      analysisResults: 'ЁЯФН рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдирддреАрдЬреЗ',
      diseaseIdentification: 'ЁЯжа рд░реЛрдЧ рджреА рдкрд┐рдЫрд╛рдг',
      symptomsObserved: 'ЁЯФН рджрд┐рдХреНрдЦреЗ рдЧреЗ рд▓рдХреНрд╖рдг',
      treatmentRecommendations: 'ЁЯТК рдЗрд▓рд╛рдЬрд╛ рджрд┐рдпрд╛рдВ рд╕рд┐рдлрд╛рд░рд┐рд╢рд╛рдВ',
      preventionTips: 'ЁЯЫбя╕П рдмрдЪрд╛рд╡рд╛ рджреЗ рддрд░реАрдХреЗ',
      additionalInformation: 'тД╣я╕П рд╣реЛрд░ рдЬрд╛рдирдХрд╛рд░реА',
      confidenceLevel: 'рднрд░реЛрд╕реЗ рджрд╛ рд╕реНрддрд░:',
      connectWithExpert: 'ЁЯОЩя╕П рдорд╛рд╣рд┐рд░рд╛ рдХрдиреНрдиреЗ рдЬреБрдбрд╝реЛ',
      analyzeAnotherPlant: 'ЁЯУ╕ рдХреЛрдИ рд╣реЛрд░ рдмреВрдЯреЗ рджрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЛ'
    },
    'kashmiri': {
      title: 'ЁЯМ▒ ╪и┘И┘╣█М┘Ж █Б┘Ж╪п ╪▒┘И┌п ┘╛╪к╪з ┌й╪▒┘П┘Ж',
      subtitle: '╪▒┘И┌п┘Ж █Б┘Ж╪▓ ┘╛╪к╪з ┌й╪▒┘Ж╪│ ╪к█М ┘Е╪з█Б╪▒┘Ж █Б┘Ж╪▓ ╪╣┘Д╪з╪м █Б┘Ж╪п ╪к╪м┘И█М╪▓┘Ж ╪о╪з╪╖╪▒█Б ┘╛┘Ж┘Ж ╪и┘И┘╣ █Б┘Ж╪п ╪╡╪з┘Б ╪к╪╡┘И█М╪▒ ╪з┘╛ ┘Д┘И┌И ┌й╪▒┘Р┘И',
      analysisResults: 'ЁЯФН ╪к╪м╪▓█М╪з╪к █Б┘Ж╪п ┘Ж╪к█М╪м█Б',
      diseaseIdentification: 'ЁЯжа ╪▒┘И┌п █Б┘Ж╪п ┘╛╪к╪з',
      symptomsObserved: 'ЁЯФН ┘И┌Ж┌╛┘Ж█Б ╪в┘Е╪к ╪╣┘Д╪з┘Е╪з╪к',
      treatmentRecommendations: 'ЁЯТК ╪╣┘Д╪з╪м █Б┘Ж╪п ╪к╪м┘И█М╪▓╪з╪к',
      preventionTips: 'ЁЯЫбя╕П ╪и┌Ж╪з┘И┘Ж █Б┘Ж╪п ╪╖╪▒█М┘В█Б',
      additionalInformation: 'тД╣я╕П ╪з╪╢╪з┘Б█М ┘Е╪╣┘Д┘И┘Е╪з╪к',
      confidenceLevel: '╪з╪╣╪к┘Е╪з╪п █Б┘Ж╪п ╪п╪▒╪м█Б:',
      connectWithExpert: 'ЁЯОЩя╕П ┘Е╪з█Б╪▒ ╪│╪з┘Ж ╪▒╪з╪и╪╖█Б ┌й╪▒┘Р┘И',
      analyzeAnotherPlant: 'ЁЯУ╕ ╪и█М ╪и┘И┘╣ █Б┘Ж╪п ╪к╪м╪▓█М█Б ┌й╪▒┘Р┘И'
    },
    'santali': {
      title: 'ЁЯМ▒ с▒лс▒Яс▒ис▒о с▒ис▒Ъс▒Ьс▒Ъ с▒кс▒дс▒▒с▒жс▒Яс▒╣',
      subtitle: 'с▒ис▒Ъс▒Ьс▒Ъ с▒кс▒дс▒▒с▒жс▒Яс▒╣ с▒Яс▒и с▒ос▒ас▒ес▒пс▒Яс▒ис▒┤ с▒дс▒Юс▒Яс▒╣с▒бс▒╜ с▒ис▒ос▒нс▒Яс▒Ь с▒ес▒Яс▒Юс▒Яс▒жс▒Я с▒Юс▒Яс▒╣с▒Ьс▒дс▒л с▒Ыс▒о с▒Яс▒вс▒Яс▒Ь с▒лс▒Яс▒ис▒о с▒ис▒ос▒нс▒Яс▒Ь с▒ес▒Яс▒пс▒╖с▒Я с▒пс▒╖с▒Ъс▒┤с▒Ъ с▒Яс▒пс▒Юс▒Ъс▒░ с▒вс▒о',
      analysisResults: 'ЁЯФН с▒╡с▒дс▒ес▒Юс▒ос▒ес▒Ъс▒▒ с▒ис▒дс▒бс▒Яс▒Юс▒┤',
      diseaseIdentification: 'ЁЯжа с▒ис▒Ъс▒Ьс▒Ъ с▒кс▒дс▒▒с▒жс▒Яс▒╣',
      symptomsObserved: 'ЁЯФН с▒зс▒ос▒Ю с▒Юс▒ос▒▒ с▒Юс▒Ъс▒ас▒╖с▒Ъс▒▒',
      treatmentRecommendations: 'ЁЯТК с▒дс▒Юс▒Яс▒╣с▒бс▒╜ с▒ис▒ос▒нс▒Яс▒Ь с▒ес▒Яс▒Юс▒Яс▒жс▒Я',
      preventionTips: 'ЁЯЫбя╕П с▒Ъс▒ис▒Ъс▒зс▒Ъс▒Ь с▒ис▒ос▒нс▒Яс▒Ь с▒жс▒Ъс▒и',
      additionalInformation: 'тД╣я╕П с▒╡с▒Яс▒╣с▒▓с▒Ыс▒д с▒ас▒╖с▒Ъс▒╡с▒Ъс▒и',
      confidenceLevel: 'с▒╡с▒╖с▒Ъс▒ис▒Ъс▒ес▒Я с▒Ыс▒╖с▒Ъс▒а:',
      connectWithExpert: 'ЁЯОЩя╕П с▒ос▒ас▒ес▒пс▒Яс▒ис▒┤ с▒ес▒Яс▒╢ с▒бс▒Ъс▒▓с▒Яс▒г с▒вс▒о',
      analyzeAnotherPlant: 'ЁЯУ╕ с▒ос▒┤с▒Яс▒Ь с▒лс▒Яс▒ис▒о с▒ис▒ос▒нс▒Яс▒Ь с▒╡с▒дс▒ес▒Юс▒ос▒ес▒Ъс▒▒ с▒вс▒о'
    },
    'maithili': {
      title: 'ЁЯМ▒ рдЧрд╛рдЫ-рдмрд┐рд░рд┐рдЦ рд░реЛрдЧ рдкрд╣рд┐рдЪрд╛рди',
      subtitle: 'рд░реЛрдЧрдХ рдкрд╣рд┐рдЪрд╛рди рдЖ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдЗрд▓рд╛рдЬрдХ рд╕реБрдЭрд╛рд╡рдХ рд▓реЗрд▓ рдЕрдкрди рдЧрд╛рдЫрдХ рд╕реНрдкрд╖реНрдЯ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб рдХрд░реВ',
      analysisResults: 'ЁЯФН рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо',
      diseaseIdentification: 'ЁЯжа рд░реЛрдЧ рдкрд╣рд┐рдЪрд╛рди',
      symptomsObserved: 'ЁЯФН рджреЗрдЦрд▓ рдЧреЗрд▓ рд▓рдХреНрд╖рдг',
      treatmentRecommendations: 'ЁЯТК рдЗрд▓рд╛рдЬрдХ рд╕реБрдЭрд╛рд╡',
      preventionTips: 'ЁЯЫбя╕П рдмрдЪрд╛рд╡рдХ рдЙрдкрд╛рдп',
      additionalInformation: 'тД╣я╕П рдЕрддрд┐рд░рд┐рдХреНрдд рдЬрд╛рдирдХрд╛рд░реА',
      confidenceLevel: 'рд╡рд┐рд╢реНрд╡рд╛рд╕рдХ рд╕реНрддрд░:',
      connectWithExpert: 'ЁЯОЩя╕П рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рдВ рдЬреБрдбрд╝реВ',
      analyzeAnotherPlant: 'ЁЯУ╕ рдЖрди рдЧрд╛рдЫрдХ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реВ'
    }
  };

  return headings[languageCode] || headings['english'];
};


  // Function to process text formatting from Gemini API response
  const processText = (text) => {
    if (!text || typeof text !== 'string') return text || '';

    // Clean up any remaining formatting artifacts but keep markdown for processing
    let processedText = text.replace(/#{1,6}\s*/g, ''); // Remove markdown headers
    processedText = processedText.replace(/`{1,3}(.*?)`{1,3}/g, '$1'); // Remove code formatting

    // Clean up extra whitespace and line breaks
    processedText = processedText.replace(/\n\s*\n/g, '\n'); // Remove multiple line breaks
    processedText = processedText.trim();

    return processedText;
  };

  // Function to render text with bold formatting
  const renderTextWithFormatting = (text) => {
    if (!text || typeof text !== 'string') return text || 'No information available';

    // Split text by **bold** patterns and render accordingly
    const parts = [];
    let currentIndex = 0;

    // Find all **text** patterns
    const boldPattern = /\*\*(.*?)\*\*/g;
    const italicPattern = /\*(.*?)\*/g;
    let match;

    // Process bold text first
    const textWithBold = text.replace(boldPattern, (match, boldText) => {
      return `<strong>${boldText}</strong>`;
    });

    // Process italic text
    const textWithItalic = textWithBold.replace(italicPattern, (match, italicText) => {
      // Don't process if it's already inside strong tags
      if (match.includes('<strong>') || match.includes('</strong>')) {
        return match;
      }
      return `<em>${italicText}</em>`;
    });

    return textWithItalic;
  };

  // Enhanced text renderer component that handles formatting
  const FormattedText = ({ text, className = "" }) => {
    if (!text || typeof text !== 'string') {
      return <div className={className}>No information available</div>;
    }

    const processedText = processText(text);
    const lines = processedText.split('\n').filter(line => line.trim());

    return (
      <div className={className}>
        {lines.map((line, index) => {
          const trimmedLine = line.trim();
          if (!trimmedLine) return null;

          const htmlContent = renderTextWithFormatting(trimmedLine);

          // Check if line looks like a bullet point or list item
          if (trimmedLine.match(/^[-тАв*]\s+/) || trimmedLine.match(/^\d+\.\s+/)) {
            return (
              <div
                key={index}
                style={{
                  marginBottom: '8px',
                  paddingLeft: '16px',
                  textIndent: '-16px'
                }}
                dangerouslySetInnerHTML={{ __html: htmlContent }}
              />
            );
          }

          return (
            <p
              key={index}
              style={{ marginBottom: '8px' }}
              dangerouslySetInnerHTML={{ __html: htmlContent }}
            />
          );
        })}
      </div>
    );
  };

  // Particles background functions (same as before)
  const createParticle = useCallback((container) => {
    const particle = document.createElement('div');
    particle.className = 'particle';

    particle.style.left = Math.random() * 100 + '%';
    particle.style.top = Math.random() * 100 + '%';

    const angle = Math.random() * Math.PI * 2;
    const distance = Math.random() * 150 + 75;

    const directionX = Math.cos(angle) * distance;
    const directionY = Math.sin(angle) * distance;

    const duration = Math.random() * 8 + 10;

    particle.style.animationDuration = duration + 's';
    particle.style.setProperty('--directionX', directionX + 'px');
    particle.style.setProperty('--directionY', directionY + 'px');

    container.appendChild(particle);

    setTimeout(() => {
      if (particle.parentNode) {
        particle.parentNode.removeChild(particle);
      }
    }, duration * 1000);
  }, []);

  const initializeParticles = useCallback(() => {
    const particlesContainer = document.getElementById('particles');
    if (!particlesContainer) return;

    const interval = setInterval(() => {
      const container = document.getElementById('particles');
      if (container) {
        const particleCount = Math.floor(Math.random() * 3) + 2;
        for (let i = 0; i < particleCount; i++) {
          setTimeout(() => createParticle(container), i * 100);
        }
      }
    }, 300);

    return () => clearInterval(interval);
  }, [createParticle]);

  useEffect(() => {
    const cleanup = initializeParticles();
    return cleanup;
  }, [initializeParticles]);

  const handleImageSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) { // 10MB limit
        setError('Image size should be less than 10MB');
        return;
      }

      if (!file.type.startsWith('image/')) {
        setError('Please select a valid image file (JPG, PNG, WEBP)');
        return;
      }

      setSelectedImage(file);
      setError(null);
      setResult(null);

      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleLanguageChange = (event) => {
    setSelectedLanguage(event.target.value);
    // Clear previous results when language changes
    setResult(null);
    setError(null);
  };

  const analyzeImageWithGemini = async () => {
    if (!selectedImage) {
      setError('Please select an image first');
      return;
    }

    setAnalyzing(true);
    setError(null);

    try {
      // Get Google API key from environment
      const apiKey = import.meta.env.VITE_GOOGLE_API_KEY;

      if (!apiKey) {
        throw new Error('Google API key not configured. Please add VITE_GOOGLE_API_KEY to your .env file');
      }

      // Convert image to base64
      const base64Image = await new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = () => {
          const base64 = reader.result.split(',')[1]; // Remove data:image/...;base64, prefix
          resolve(base64);
        };
        reader.readAsDataURL(selectedImage);
      });

      // Get language instruction
      const selectedLanguageName = getLanguageInstruction(selectedLanguage);

      // Prepare the request to Gemini API with language-specific instruction
      const requestBody = {
        contents: [{
          parts: [
            {
              text: `You are an expert agricultural pathologist and plant disease specialist with extensive knowledge of Indian crops and farming conditions. Analyze this plant image thoroughly and provide a comprehensive disease diagnosis.

Please analyze the uploaded plant image and provide the following information in JSON format:

{
  "disease": "Specific disease name",
  "confidence": "High/Medium/Low with percentage if possible",
  "symptoms": "Detailed list of visible symptoms observed",
  "treatment": "Comprehensive treatment recommendations including immediate actions, fungicides/treatments with concentrations, organic options, application methods",
  "prevention": "Prevention measures including cultural practices, crop rotation, sanitation, environmental management",
  "additional_info": "Recovery timeline, disease spread info, when to seek professional help, regional considerations for Indian farming"
}

IMPORTANT GUIDELINES:
- If the image is unclear or doesn't show a plant, clearly state this
- If no disease is visible, mention the plant appears healthy
- Be specific about treatment concentrations and safety precautions
- Consider regional factors and common diseases in India
- Use simple language that farmers can easily understand
- Provide practical, actionable advice suitable for Indian farming conditions
- You can use **bold** formatting for important terms and concepts
- Use *italic* formatting for emphasis where appropriate
- IMPORTANT: Provide your entire response in ${selectedLanguageName} language. All field values in the JSON should be in ${selectedLanguageName}.

Please provide your analysis in the exact JSON format specified above, with all content in ${selectedLanguageName}.`
            },
            {
              inline_data: {
                mime_type: selectedImage.type,
                data: base64Image
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.2,
        }
      };

      // Retry logic for API overload (503 errors)
      let response;
      let retryCount = 0;
      const maxRetries = 3;

      while (retryCount < maxRetries) {
        try {
          response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
          });

          if (response.status === 503) {
            retryCount++;
            if (retryCount < maxRetries) {
              // Wait with exponential backoff before retrying
              const waitTime = Math.pow(2, retryCount) * 1000; // 2s, 4s, 8s
              await new Promise(resolve => setTimeout(resolve, waitTime));
              continue;
            }
          }
          break;
        } catch (fetchError) {
          retryCount++;
          if (retryCount >= maxRetries) {
            throw fetchError;
          }
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        if (response.status === 503) {
          throw new Error('The Gemini API is currently overloaded. Please try again in a few minutes.');
        }
        throw new Error(`API Error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();

      // Extract the text response
      let analysisText = '';
      if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
        analysisText = data.candidates[0].content.parts[0].text;
      } else {
        throw new Error('No analysis generated from the API');
      }

      // Process the analysis text (but don't strip formatting)
      analysisText = processText(analysisText);

      // Try to parse JSON response first
      let parsedResult;
      try {
        // Clean the response text to extract JSON
        const jsonMatch = analysisText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          parsedResult = JSON.parse(jsonMatch[0]);

          // Process all text fields in the parsed result (keep formatting)
          Object.keys(parsedResult).forEach(key => {
            if (typeof parsedResult[key] === 'string') {
              parsedResult[key] = processText(parsedResult[key]);
            }
          });
        } else {
          throw new Error('No JSON found in response');
        }
      } catch (jsonError) {
        // If JSON parsing fails, parse the text response manually
        parsedResult = parseTextResponse(analysisText);
      }

      setResult(parsedResult);

    } catch (err) {
      console.error('Analysis error:', err);
      if (err.message.includes('overloaded') || err.message.includes('503')) {
        setError('The AI service is currently busy. Please try again in a few minutes.');
      } else {
        setError(`Analysis failed: ${err.message}`);
      }
    } finally {
      setAnalyzing(false);
    }
  };

  // Fallback function to parse text response if JSON parsing fails
  const parseTextResponse = (text) => {
    const processedText = processText(text);

    const result = {
      disease: "Analysis completed",
      confidence: "Available",
      symptoms: "Check the detailed analysis below",
      treatment: "Recommendations provided",
      prevention: "Prevention tips included",
      additional_info: processedText
    };

    // Try to extract specific sections from text
    const sections = {
      disease: /(?:disease|condition|problem):\s*([^\n]+)/i,
      confidence: /(?:confidence|certainty):\s*([^\n]+)/i,
      symptoms: /(?:symptoms|visible symptoms):([\s\S]*?)(?=treatment|prevention|additional|$)/i,
      treatment: /(?:treatment|recommendations):([\s\S]*?)(?=prevention|additional|$)/i,
      prevention: /(?:prevention|preventive):([\s\S]*?)(?=additional|$)/i,
      additional_info: /(?:additional|other|note):([\s\S]*?)$/i
    };

    Object.keys(sections).forEach(key => {
      const match = processedText.match(sections[key]);
      if (match && match[1]) {
        result[key] = processText(match[1].trim());
      }
    });

    return result;
  };

  const resetAnalysis = () => {
    setSelectedImage(null);
    setImagePreview(null);
    setResult(null);
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      const file = files[0];
      const fakeEvent = { target: { files: [file] } };
      handleImageSelect(fakeEvent);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  // Get current language headings
  const headings = getLocalizedHeadings(selectedLanguage);

  return (
    <div className="disease-detection-container">
      <div className="particles-container" id="particles"></div>

      <div className="detection-content">
        <div className="detection-header">
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%', height: '60px' }}>
            <div style={{ display: 'flex', width: '100%', justifyContent: 'space-between' }}>
              <div>
                <select
                  value={selectedLanguage}
                  onChange={handleLanguageChange}
                  className="back-button"
                  style={{
                    appearance: 'none',
                    backgroundImage: `url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'%3e%3cpath d='M7 10l5 5 5-5'/%3e%3c/svg%3e")`,
                    backgroundRepeat: 'no-repeat',
                    backgroundPosition: 'right 12px center',
                    backgroundSize: '16px',
                    paddingRight: '40px',
                    minWidth: '180px',
                    cursor: 'pointer',
                    marginLeft: '86%'
                  }}
                >
                  {indianLanguages.map((language) => (
                    <option key={language.code} value={language.code}>
                      {language.name}
                    </option>
                  ))}
                </select>
              </div>

              <button className="back-button" onClick={onBackToHome}>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="m12 19-7-7 7-7" />
                  <path d="m19 12H5" />
                </svg>
                Back to Home
              </button>
            </div>
          </div>

          <h1>{headings.title}</h1>
          <p>{headings.subtitle}</p>
        </div>

        <div className="upload-section">
          <div
            className="upload-area"
            onClick={() => fileInputRef.current?.click()}
            onDrop={handleDrop}
            onDragOver={handleDragOver}
          >
            {!imagePreview ? (
              <div className="upload-placeholder">
                <div className="upload-icon">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                    <circle cx="9" cy="9" r="2" />
                    <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />
                  </svg>
                </div>
                <h3>Click to upload or drag & drop</h3>
                <p>Support JPG, PNG, WEBP (Max 10MB)</p>
                <div className="upload-tips" style={{ boxSizing: 'border-box', padding: '1.7rem', textAlign: 'left' }}>
                  <p style={{ textAlign: 'center' }}><strong>ЁЯУ╕ Tips for best results</strong></p>
                  <ul>
                    <li>Take photos in good natural light</li>
                    <li>Focus on affected plant parts (leaves, stems, fruits)</li>
                    <li>Avoid blurry or dark images</li>
                    <li>Include healthy parts for comparison</li>
                    <li>Get close-up shots of symptoms</li>
                  </ul>
                </div>
              </div>
            ) : (
              <div className="image-preview">
                <img src={imagePreview} alt="Selected plant" />
                <div className="image-overlay">
                  <button className="change-image-btn" onClick={() => fileInputRef.current?.click()}>
                    ЁЯУ╖ Change Image
                  </button>
                </div>
              </div>
            )}
          </div>

          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            onChange={handleImageSelect}
            style={{ display: 'none' }}
          />

          {selectedImage && (
            <div className="action-buttons">
              <button
                className="analyze-button"
                onClick={analyzeImageWithGemini}
                disabled={analyzing}
              >
                {analyzing ? (
                  <>
                    <div className="spinner"></div>
                    Analyzing Plant...
                  </>
                ) : (
                  <>
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M9 12l2 2 4-4" />
                      <circle cx="12" cy="12" r="9" />
                    </svg>
                    Analyze Disease
                  </>
                )}
              </button>

              <button className="reset-button" onClick={resetAnalysis}>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" />
                  <path d="M3 3v5h5" />
                </svg>
                Try Another Image
              </button>
            </div>
          )}
        </div>

        {error && (
          <div className="error-message">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <circle cx="12" cy="12" r="10" />
              <line x1="15" y1="9" x2="9" y2="15" />
              <line x1="9" y1="9" x2="15" y2="15" />
            </svg>
            {error}
          </div>
        )}

        {result && (
          <div className="result-section">
            <div className="result-header">
              <h2>{headings.analysisResults}</h2>
            </div>

            <div className="result-content">
              <div className="disease-info">
                <h3>{headings.diseaseIdentification}</h3>
                <div
                  className="disease-name"
                  dangerouslySetInnerHTML={{
                    __html: renderTextWithFormatting(result?.disease || 'Unknown Disease')
                  }}
                />
                <div className="confidence-score">
                  {headings.confidenceLevel} <span
                    className="confidence-value"
                    dangerouslySetInnerHTML={{
                      __html: renderTextWithFormatting(result?.confidence || 'N/A')
                    }}
                  />
                </div>
              </div>

              <div className="symptoms-section">
                <h3>{headings.symptomsObserved}</h3>
                <div className="symptoms-content">
                  <FormattedText
                    text={result?.symptoms}
                    className="symptoms-text"
                  />
                </div>
              </div>

              <div className="treatment-section">
                <h3>{headings.treatmentRecommendations}</h3>
                <div className="treatment-content">
                  <FormattedText
                    text={result?.treatment}
                    className="treatment-text"
                  />
                </div>
              </div>

              <div className="prevention-section">
                <h3>{headings.preventionTips}</h3>
                <div className="prevention-content">
                  <FormattedText
                    text={result?.prevention}
                    className="prevention-text"
                  />
                </div>
              </div>

              <div className="additional-info">
                <h3>{headings.additionalInformation}</h3>
                <div className="info-content">
                  <FormattedText
                    text={result?.additional_info}
                    className="additional-text"
                  />
                </div>
              </div>
            </div>

            <div className="result-actions">
              <button className="expert-connect-btn" onClick={onBackToHome}>
                {headings.connectWithExpert}
              </button>
              <button className="new-analysis-btn" onClick={resetAnalysis}>
                {headings.analyzeAnotherPlant}
              </button>
            </div>
          </div>
        )}

        {!selectedImage && !result && (
          <div className="info-cards">
            <div className="info-card">
              <div className="card-icon">ЁЯФм</div>
              <h3>AI-Powered Analysis</h3>
              <p>Advanced Google Gemini AI analyzes your plant images to identify diseases accurately</p>
            </div>
            <div className="info-card">
              <div className="card-icon">ЁЯТб</div>
              <h3>Expert Recommendations</h3>
              <p>Get detailed treatment plans and prevention strategies from agricultural specialists</p>
            </div>
            <div className="info-card">
              <div className="card-icon">ЁЯМ▒</div>
              <h3>Crop-Specific Solutions</h3>
              <p>Tailored advice for Indian crops and farming conditions to maximize your harvest</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DiseaseDetection;

